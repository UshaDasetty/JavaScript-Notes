V8 Engine
ECMA Script
Variables 
Data Types
Interpollation
DOM 
Callbacks
Promises
Async await
Classes
Events
Event listeners
Event Bubbling and Event Capturing
Fetch API
Array methods
String methods
Objects
Scoping
Hoisting 
Closures
this keyword
'usestrict'
Pop Up boxes 
Console Object methods
Diff between parameters and arguements
IIFE
Local Storage, Session Storage and Cookies
Iterations
new keyword
Errors
Math Operators
Date Operators
Outputs
call(), apply() and bind() methods
prototype

**************************************************************************************************
V8 Engine:-
-> V8 is the name of the Javascript engine which is developed by Google chrome.
-> It is run time environment.
-> It is used to execute JavaScript code while browsing the chrome.
-> Every Browser is having Javascript engine.
     1) V8(chrome)
     2) SpiderMonkey(Firefox)
     3) Rhino(Mozilla)

-----------------------------------------------------------------------------------------------------------------------------------------------------------------

ECMA Script:-
-> European Computer Manfactures Association Script).
-> It is also known ECMA-262.
-> First Edition was released in 1997.
-> It is a Scripting language based on JavaScript.
-> Invented by Brendan Eich at NetsScape.
-> ES6 to ES10
-> ES6 Features are:
    1) let keyword
    2) const keyword
    3) Arrow functions
    4) For/of and For/in
    5) Object Destructuring
    6) Promises
    7) Default parameters
    8) Spread Operators
    9) Rest Operators
    10) this keyword
    11) Array methods

 ---------------------------------------------------------------------------------------------------------------------

 Variables:-

 Variables: Variables are containers for storing data, Always declare Javascript variables with var, let and const keywords.
   
    var -    hoisting        &    mutable
    let -    not Hoisting    &    mutable
    const -  not Hoisting    &    not mutable

---------------------------------------------------------------------------------------------------------------------

DataTypes:-

 DataType: Type of the value assigned.
    1) Primitive types
        - String
        - Number
        - Boolean
        - Undefined
        - Null

    2) Non-primitive types
        - Object
        - Array
        - RegExp

---------------------------------------------------------------------------------------------------------------------

Interpollation: concating string with variable using ` ${}`

---------------------------------------------------------------------------------------------------------------------
DOM

---------------------------------------------------------------------------------------------------------------------
Callbacks

-> A callback function is a function passed into another function as an argument.
-> A callback function executes after outer function executes.
-> Higher Order function:- A function which receives other function as an argument is called Higher Order Function.

        function greeting(name) {
        alert('Hello ' + name);
        }

        function processUserInput(callback) {
        var name = prompt('Please enter your name.');
        callback(name);
        }

        processUserInput(greeting);

-> In the above example greeting() is a callback function, and processUserInput() is Higher Order Function.
-> greeting() is executed after processUserInput() executes.



Callback Hell :-

-> When we are having nested callbacks is called callback hell.
-> It is difficult to handle callback hell, to overcome this we use promises.

        setTimeout(() => {
            console.log("Hello");
            setTimeout(() => {
                console.log("Hey");
                setTimeout(() => {
                    console.log("Namaste");
                    setTimeout(() => {
                        console.log("Hi");
                        setTimeout(() => {
                            console.log("Bonjour");
                        }, 2000);
                    }, 2000);
                }, 2000);
            }, 2000);
        }, 2000);

---------------------------------------------------------------------------------------------------------------------
Promises

-> Promises are used to handle asynchronous operations in JavaScript. 
-> It is easy to manage when dealing with multiple asynchronous operations, 
    where callbacks can create callback hell leading to unmanageable code. 

-> A Promise has four states: 
    fulfilled: Action related to the promise succeeded.
    rejected: Action related to the promise failed.
    pending: Promise is still pending i.e. not fulfilled or rejected yet.
    settled: Promise has fulfilled or rejected.

-> Parameters:
    - Promise takes two arguments resolve and reject
    - If everything went well then it call resolve().
    - If everything do not go well then it call reject().


        var promise = new Promise(function(resolve, reject) {
        const x = "usha";
        const y = "usha"
        if(x === y) {
            resolve();
        } else {
            reject();
        }
        });

        promise.
            then(function () {
                console.log('Success, You are a usha');
            }).
            catch(function () {
                console.log('Some error has occurred');
            });



Promise Hell :-

-> When we have nested promises i.e., having many then() blocks it is difficult to handle.
-> to overcome this difficult, we Async and await.


        var promise = new Promise(function(resolve, reject) {
            const x = "usha";
            const y = "usha"
            if(x === y) {
                resolve();
            } else {
                reject();
            }
        });

        promise.
            then(function () {
                console.log('Success, You are a usha');
            }).
            then(function () {
                console.log('Welcome usha');
            }).
            then(function () {
                console.log('How are you');
            }).
            catch(function () {
                console.log('Some error has occurred');
            });

---------------------------------------------------------------------------------------------------------------------
Async await
